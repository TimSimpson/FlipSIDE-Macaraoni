~import boost::format;
~import LP3_LOG_DEBUG;
~import std::string;
~import std::vector;


~namespace nnd32;

class WaveSound
{
    private ResettableReadStreamPtr stream;
    private WaveFile file;
    private WaveFileSource wfs;

    public WaveSound(path)
    :   stream(InputFileStream::Create(path)),
        file(stream),
        wfs(*(GlobalHeap::GetGlobalHeap()),
            &file,
            4 * 80 * 1024,
            (80 * 1024) / 4)
    {}
};

class Sound
{
    private vector<WaveSound *> waves;

    public Sound()
    :   waves()
    {
        waves.reserve(30);
    }

    public void LoadSound(int which, const string & soundFile,
                          string soundName = "")
    {
        waves[which] = new WaveSound(soundFile);;
    }

    public void PlayBgm(const string & soundFile)
    {
        LP3_LOG_DEBUG("PlayBgm %s", soundFile);
    }

    public void PlayIsoWave(const string & soundFile)
    {
        LP3_LOG_DEBUG("PlayIsoWave %s", soundFile);
    }

    // Renamed with underscore to avoid ridiculous Windows header macro
    // issue.
    public void PlaySound_(const string & soundFile)
    {
        LP3_LOG_DEBUG("PlaySound %s", soundFile);
    }

    public void PlaySoundLoop(int which)
    {
        LP3_LOG_DEBUG("PlaySoundLoop %d", which);
    }

    public void PlayWave(const string & soundFile)
    {
        LP3_LOG_DEBUG("PlayWave %s", soundFile);
    }

    public void StopSound(int which)
    {
        LP3_LOG_DEBUG("StopSound %d", which);
    }
};
