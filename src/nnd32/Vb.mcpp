~import Lp3::Engine::Resources::EnvVars;
~import LP3_FAIL;
~import boost::format;
~import std::fstream;
~import LP3_LOG_DEBUG;
~import std::mt19937;
~import std::random_device;
~import std::string;
~import std::uniform_real_distribution;


~namespace nnd32;


// Helper class which simulates old Visual Basic functions.
class Vb
{
    ~import nnd32::VbFile;

    private random_device rnd_dev;
    private mt19937 rnd_gen;
    private uniform_real_distribution<double> rnd_distribution;

    public Vb()
    :   rnd_dev(),
        rnd_gen(rnd_dev()),
        rnd_distribution(0.0, 1.0)
    {
    }

    public VbFile OpenForInput(const string & filePath)
    {
        return VbFile(filePath);
    }

    public double Rnd() {
        return rnd_distribution(rnd_gen);
    }
};

class VbFile
{
    fstream file;
    string fullPath;

    public VbFile(const string & filePath)
    :   file(),
        fullPath()
    {
        fullPath = str(format("%s/FlipSIDE/%s") % EnvVars::Get("LP3_ROOT_PATH")
                                     % filePath);
        LP3_LOG_DEBUG("Opening file %s...", fullPath);
        file.open(fullPath.c_str(), std::ios::in | std::ios::binary);
        if (file.bad() || file.fail())
        {
            LP3_FAIL("Error opening file %s!", fullPath);
        }
    }

    public ~VbFile()
    {
        LP3_LOG_DEBUG("Closing file %s...", fullPath);
        file.close();
    }

    private void getLine(string & line) {
        LP3_LOG_DEBUG("Reading line from %s", fullPath);
        if (!std::getline(this->file, line)) {
            LP3_LOG_ERROR("Error reading line from %s", fullPath);
            LP3_FAIL("Failure to read line!");
        }
    }

    template<typename... ParameterTypes>
    public void Input(ParameterTypes & ... args)
    {
        string line;
        this->getLine(line);
        for (int i = 0; i < line.size(); ++i) {
            if (line[i]== ',') {
                line[i] = ' ';
            }
        }
        std::stringstream ss(line);
        setArguments(ss, args...);
    }

    template<typename ParameterType>
    void setArg(std::stringstream & ss, ParameterType & arg)
    {
        ss >> arg;
    }

    void setArg(std::stringstream & ss, std::string & arg)
    {
        ss >> arg;
        // Visual Basic files allowed for items to be wrapped in quotes.
        // This unwraps them.
        if (arg.size() > 1 && arg[0] == '"' && arg[arg.size() - 1] == '"') {
            arg = arg.substr(1, arg.size() - 2);
        }
    }

    template<typename HeadType, typename... TailTypes>
    void setArguments(std::stringstream & ss, HeadType & head,
                      TailTypes & ... tail)
    {
        setArg(ss, head);
        setArguments(ss, tail...);
    }

    template<typename LastType>
    void setArguments(std::stringstream & ss, LastType & arg)
    {
        setArg(ss, arg);
    }
};
