~import std::algorithm;
~import std::array;
~import nnd32::CharacterSprite;
~import std::string;

~namespace nnd32;

struct World
{
    ~block "h-predef" {
        #include <array>
        #include "CharacterSprite.h"
        #include "CinemaType.h"
    }
    ~block "h" {

    // Using this anytime there appears to be some issues with precision.
    typedef double VbNumber;

    enum Cpp98Hack {
        FULLSCREENWIDTH = 640,
        FULLSCREENHEIGHT = 480,
        NUMSPRITES = 150
    };

    double Gravity;
    double clock;
    std::string screen;
    std::array<int, NUMSPRITES + 1> drawOrder;

    bool LemonTime; // a fun stupid cheat code that when set to true ups speed by 2.
    double cranBerry; //Used to gage frame rate
    double lasttime;
    int frRate;
    int frRate2;
    int gpRate;
    int gpRate2;
    double cranBerry2;
    bool debugOn;
    double sFactor; //makes objects move at speeds irrelevent to frame rate
    int const tRate = 60; //125; //The target frame rate

    int CameraX;
    int CameraY;
    int CameraWidth;
    int CameraHeight;
    int cameraStopX;  //this is where the cameraHALTS!
    int cameraStopY; //this is where the cameraHALTS! for y
    int gotFocus;

    std::array<CinemaType, 40> cinema; // Dialogue!
    int cinemaCounter;
    int cinemaMax; //how many lines of dialogue per cinema
    std::string exitS;

    std::array<CharacterSprite, NUMSPRITES + 1> Sprite;

    int bgWidth;
    int bgHeight;

    //Used to get the heck out of a never ending do loop
    bool STOPGAME;

    //Used to figure out are width and heighth
    int RealWidth;
    int RealHeight;
    //Simulated resolution (of course, the real resolution)
    int SimulatedWidth;
    int SimulatedHeight;

    //Keyboard key states
    std::array<bool, 3> upKey;
    std::array<bool, 3> DownKEY;
    std::array<bool, 3> LeftKEY;
    std::array<bool, 3> RightKEY;
    std::array<bool, 3> SelectKey;
    std::array<bool, 3> AttackKey;
    std::array<bool, 3> AttackKeyRelease;
    std::array<bool, 3> CancelKey;
    std::array<bool, 3> JumpKey;


    int normColor;
    int maskColor;
    int spritesInUse;

    int ponkoMonkey;
    int dojoMonkey;

    std::array<std::string, 3> KeyUp;
    std::array<std::string, 3> KeyDown;
    std::array<std::string, 3> KeyLeft;
    std::array<std::string, 3> KeyRight;
    std::array<std::string, 3> KeyAttack;
    std::array<std::string, 3> KeyJump;

    std::string FilePath;

    //GAME PLAY MULTIPLE PLAYERS DATA
    int numberPlayers;
    std::array<std::string, 3> playerName;
    std::array<int, 3> lives;
    int continues;
    std::array<bool, 3> ThreeWay;
    std::array<bool, 3> slicer;
    std::array<int, 3> GradeUp;
    std::array<std::string, 3> weapon;

    std::string currentScreen;
    } // end h block

    public World()
    :   Gravity(0),
        clock(0),
        screen(),
        drawOrder(),
        LemonTime(false),
        cranBerry(0),
        lasttime(0),
        frRate(0),
        frRate2(0),
        gpRate(0),
        gpRate2(0),
        cranBerry2(0),
        debugOn(false),
        sFactor(0),
        CameraX(0),
        CameraY(0),
        CameraWidth(0),
        CameraHeight(0),
        cameraStopX(0),
        cameraStopY(0),
        gotFocus(0),
        cinema({}),
        cinemaCounter(0),
        cinemaMax(0),
        exitS(),
        Sprite(),
        bgWidth(0),
        bgHeight(0),
        STOPGAME(false),
        RealWidth(0),
        RealHeight(0),
        SimulatedWidth(0),
        SimulatedHeight(0),
        upKey({}),
        DownKEY({}),
        LeftKEY({}),
        RightKEY({}),
        SelectKey({}),
        AttackKey({}),
        AttackKeyRelease({}),
        CancelKey({}),
        JumpKey({}),
        normColor(0),
        maskColor(0),
        spritesInUse(0),
        ponkoMonkey(0),
        dojoMonkey(0),
        KeyUp({}),
        KeyDown({}),
        KeyLeft({}),
        KeyRight({}),
        KeyAttack({}),
        KeyJump({}),
        FilePath(),
        numberPlayers(0),
        playerName({}),
        lives({}),
        continues(0),
        ThreeWay({}),
        slicer({}),
        GradeUp({}),
        weapon({}),
        currentScreen()
    {
        std::fill(drawOrder.begin(), drawOrder.end(), 0);
        std::fill(Sprite.begin(), Sprite.end(), CharacterSprite{});
    }
};
