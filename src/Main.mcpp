~unit FlipSide type=exe;

~import boost::format;
~import LP3_LOG_DEBUG;
~import Lp3::Engine::Time::Clock;
~import Lp3::Engine::Input::Controls;
~import nnd32::Game;
~import Lp3::Engine::Gfx::GfxManager;
~import nnd32::Sound;
~import std::string;
~import nnd32::Vb;
~import nnd32::View;
~import nnd32::World;
~import std::vector;

~block "cpp" :=

#define LP3_MICROMAIN_NAME "FlipSIDE"
#define LP3_MICROMAIN_WITH_GFX_DEPS true
#include <Lp3/Engine/MicroMain.h>


struct Run{

    template<typename Func>
    Run(Func f) {
        f();
    }

};

class Main
{
private:

    Run r1;
    GfxManager manager;
    Run r2;
    Controls controls;
    Run r3;
    Sound sound;
    Run r4;
    World world;
    Run r5;
    View view;
    Run r6;
    Vb vb;
    Game game;
    double currentTimerTime;
    double nextTimerCallTime;

public:
    Main(const vector<string> & arguments
         LP3_COMPILE_TARGET_WINDOWS_THEN(, HINSTANCE hInstance, HWND hWnd))
    :   r1([](){ LP3_LOG_DEBUG("Initializing GFX manager."); }),
        manager(LP3_COMPILE_TARGET_WINDOWS_THEN(hWnd)),
        r2([](){ LP3_LOG_DEBUG("Initializing controls."); }),
        controls(
            #ifdef COMPILE_TARGET_WINDOWS
                hInstance, hWnd
            #endif
        ),
        r3([](){ LP3_LOG_DEBUG("Initializing sound system."); }),
        sound(),
        r4([](){ LP3_LOG_DEBUG("Creating world."); }),
        world(),
        r5([](){ LP3_LOG_DEBUG("Creating viewer."); }),
        view(manager, world),
        r6([](){ LP3_LOG_DEBUG("Creating game object."); }),
        vb(),
        game(controls, view, sound, vb, world),
        currentTimerTime(0),
        nextTimerCallTime(1.0/5.0)
    {
        LP3_LOG_DEBUG("Starting Clock...");
        Clock::Init(1000.0f / 30.0f);
    }

    ~Main()
    {
        LP3_LOG_DEBUG("Shutting down, good-bye.");
    }

    void Iterate()
    {
        // MainLoop

        if (world.STOPGAME)
        {
            // Stop the game, somehow? Maybe post a quit message to Windows.
        }
        // Update the world's perception of time.
        Clock::NextFrame();

        // This is tricky because I have to understand how the old game
        // perceived things.
        // Old code:
        //      sFactor = tRate / frRate ;
        //      clock = clock + ((1/120) * sFactor)

        // I am presuming clock intended to be updated 120 times a second under
        // optimal unless there was slow down. So:
        //world.clock = world.clock + (120.0 * Clock::GetSpeedMod());
        world.clock = world.clock + Clock::GetSpeedMod();
        // I am also presumming that sFactor was 2, based on the code:
        world.sFactor = Clock::GetSpeedMod() * 2.0;
        if (world.LemonTime) {
            world.sFactor *= 2;
        }

        // This is kind of goofy. In the VB version "timedEvents" got called
        // by a real timer, b/c I couldn't make the animation look right
        // otherwise. But, that may have been due to me using the GetTickCount
        // method, which the Clock class of Lp3 refers to as "Crappy Timer."
        // :) So using the world clock here to call the "timed" events actually
        // makes more sense.
        currentTimerTime += Clock::GetSpeedMod();
        //LP3_LOG_DEBUG("currentTimerTime %f", currentTimerTime);
        //LP3_LOG_DEBUG("nextTimerCallTime %f", nextTimerCallTime);
        /*LP3_LOG_SET("world.Clock", world.clock);

        LP3_LOG_SET("world.Sprite[0].SpriteVerts[1].tu", world.Sprite[0].SpriteVerts[1].tu);
        LP3_LOG_SET("world.Sprite[0].SpriteVerts[1].tv", world.Sprite[0].SpriteVerts[1].tv);

        LP3_LOG_SET("world.Sprite[0].srcx", world.Sprite[0].srcx);
        LP3_LOG_SET("world.Sprite[0].srcy", world.Sprite[0].srcy);

        LP3_LOG_SET("world.Sprite[0].frame", world.Sprite[0].frame);
        LP3_LOG_SET("world.Sprite[0].reverse", world.Sprite[0].reverse);*/

        while (currentTimerTime > nextTimerCallTime) {
            currentTimerTime -= nextTimerCallTime;
            game.TimedEvents();
        }

        controls.Update();
        game.PlayGame();

        view.DrawStuff();
    }

    LP3_COMPILE_TARGET_WINDOWS_THEN(
        void WindowsMessage(HWND hWnd, UINT message, WPARAM wParam,
                            LPARAM lParam)
        {
            switch(message){
                case WM_SIZE:
                    manager.Resize({ LOWORD(lParam), HIWORD(lParam) });
                    break;
                case WM_SETFOCUS:
                {
                    /*if (0 != manager)
                    {
                        LP3_LOG_DEBUG("Reacquiring input. Calling "
                                      "SwitchWindow.");
                        manager.SwitchWindow(hWnd);
                    }*/
                } break;
                case WM_KEYDOWN:
                    game.OnKey((char)wParam);
                    break;
                case WM_KEYUP:
                    game.OffKey((char)wParam);
                    break;
                default:
                    break;
            }
        }
    );
};


LP3_MICROMAIN(Main, "FlipSIDE");
